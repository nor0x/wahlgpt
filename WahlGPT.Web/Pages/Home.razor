@page "/"
@using Microsoft.KernelMemory
@using System.Globalization
@using WahlGPT.Common

@inject ChatManager _chat;
@inject IJSRuntime _js;

<PageTitle>WahlGPT</PageTitle>

<!-- Header -->
<section id="header">
	<div class="inner">
		<span class="welcome-icon icon solid major ">👋</span>
		<h1>
			Willkommen zu <strong>WahlGPT</strong>
			<div class="beta-badge">βeta</div>
		</h1>
		<p class="header-info-text">...ein LLM das die Wahlprogramme zur Nationalratswahl 2024 <a href="https://www.bmi.gv.at/412/Nationalratswahlen/Nationalratswahl_2024/start.aspx#pk_02" target="_blank">aller Parteien</a> gelesen hat und dir Fragen dazu beantwortet.
		</p>
		<p>
			bisher wurden<span data-countup> @_answerCount</span> Antworten generiert
		</p>

		<ul class="actions special">
			<li>
				<textarea class="question-input" type="text" placeholder="Deine Frage zum Wahlprogramm?"
						  @oninput="QuestionChanged" />
						  <p>Partei(en) auswählen:</p>
				<ul class="parties-list">
					@foreach (var party in _parties)
					{
						@if (party.selected)
						{
							<li class="party selected" @onclick="() => SelectParty(party.party)">@party.party</li>
						}
						else
						{
							<li class="party" @onclick="() => SelectParty(party.party)">@party.party</li>
						}
					}
				</ul>
				<button class="button primary" @onclick="AskQuestion" disabled="@_buttonDisabled">@_questionButtonText</button>
			</li>
		</ul>
	</div>
</section>

<!-- One -->
<section id="one" class="main style1">
	<div class="container">
		<header class="major">
			<h2>
				@_question
			</h2>
		</header>
		@if (_waitingForAnswer)
		{
			<div class="answer-loader">
				<span></span>
				<span></span>
				<span></span>
			</div>
		}
		<div class="row gtr-150 answer-row">
			@if (_answers is not null)
			{

				@foreach (var answer in _answers.OrderByDescending(a => _parties.First(p => p.party == a.party).order))
				{

					<div class="col-6 col-12-medium">
						<span class="selected-party-badge">
							@answer.party
						</span>
						<p>@((MarkupString)ChatManager.ConvertToHtml(answer.answer))</p>
						<div class="answer-spacer"></div>
					</div>
					<div class="col-6 col-12-medium imp-medium">
						<header class="major">
							<h3>
								Quellen:
							</h3>
						</header>
						@if (answer.source?.Partitions is not null)
						{
							<section class="accordion">

								@foreach (var citation in answer.source.Partitions.Take(3))
								{
									<div class="tab">
										<input type="checkbox" name="accordion-1" id="part-@citation.Relevance">
										<label for="part-@citation.Relevance" class="tab__label">
											@(answer.party.ToLower() + ".pdf") -
											Relevanz: @citation.Relevance.ToString("P", CultureInfo.InvariantCulture)
											- zuletzt aktualisiert:
											@citation.LastUpdate.ToString("dd'.'MM'.'yyyy", CultureInfo.InvariantCulture)
										</label>
										<div class="tab__content">
											<p><i>@citation.Text</i></p>
										</div>
									</div>
								}

							</section>
						}
						else
						{
							<p>Keine Quellen gefunden.</p>
						}

						<p>
							Wahlprogamm herunterladen: <a href="@GetDownloadUrl(answer.party)" target="_blank">
								@GetDownloadUrl(answer.party).Split("/").LastOrDefault()
							</a>
						</p>
					</div>
				}
			}
		</div>
	</div>
	<p class="answer-info-text">
		Diese Antworten wurde mittels Retrieval-Augmented Generation (RAG) und einem Large-Language Model (LLM) erstellt. Diese Technologien kombinieren die Fähigkeit, relevante Daten aus verschiedenen Quellen abzurufen, und mittels Textgenerierung Zusammenfassungen zu erstellen. Bitte berücksichtige, dass die Möglichkeit von Fehlern oder Ungenauigkeiten besteht.
	</p>
</section>

<!-- Two -->
<section id="two" class="main style2">
	<div class="container">
		<div class="row gtr-150">
			<div class="col-6 col-12-medium">
				<img src="images/flow.png" class="flow-img" alt="WahlGPT Funktionsweise" />
			</div>
			<div class="col-6 col-12-medium">
				<header class="major">
					<h2>
						Wie funktioniert WahlGPT?
					</h2>
				</header>
				<p>Ein Large Language Model (LLM) ist eine Software, die natürliche Sprache verstehen und erzeugen kann. Wenn ein LLM mit "Retrieval-Augmented Generation" (RAG) kombiniert wird, kann es besonders nützlich sein, um spezifische Informationen aus großen Textsammlungen, wie zum Beispiel Wahlprogrammen, zu finden und zu nutzen.</p>
				<p>
					So funktioniert es:
					<br />
					<strong>Eingabe der Frage:</strong> Du stellst eine Frage zu einem Wahlprogramm, zum Beispiel: "Was sagt Partei X über Umweltschutz?" <br />
					<strong>Informationssuche (Retrieval):</strong> Das LLM durchsucht die gespeicherten Wahlprogramme nach relevanten Textstellen, die deine Frage beantworten könnten. <br />
					<strong>Antwortgenerierung (Augmented Generation):</strong> Das LLM verarbeitet die gefundenen Informationen und formuliert eine verständliche Antwort.
				</p>
				<p>Durch diese Kombination von Suche und Textgenerierung kann das LLM präzise und nützliche Antworten auf deine Fragen zu Wahlprogrammen geben. Du erhältst schnell klare Informationen, ohne die gesamten Texte selbst durchsuchen zu müssen.</p>
				<p>Der Code von WahlGPT ist open-source und auf <strong><a class="content-link-a" href="https://github.com/nor0x/wahlgpt" target="_blank">GitHub</a></strong> verfügbar. Dort können auch alle <a class="content-link-a" href="https://github.com/nor0x/wahlgpt/tree/main/WahlGPT.Importer/Documents">Wahlprogramme</a> die als Import verwendet heruntergeladen werden.
				Eine detaillierte technische Beschreibung des Projekts und der verwendeten Komponenten findest du in meinem <strong><a class="content-link-a" href="https://johnnys.news/2024/09/How-I-built-wahlGPT" target="_blank">Blogpost (Englisch)</a></strong>.</p>
			</div>
		</div>
	</div>
</section>

<!-- Footer -->
<section id="footer">
	<div class="container">
		<header class="major">
			<h2>Support?!</h2>
		</header>
		<p class="support-text">
			jede Antwort die von WahlGPT generiert wird, kostet Geld.<br /> Wenn du das Projekt unterstützen möchtest, kannst du das hier tun. Merci 🙌
		</p>
		<ul class="actions special">
			<li><a href="https://bento.me/nor0x" target="_blank" class="button wide primary">Unterstützen!</a></li>
			<li><a href="https://github.com/nor0x/wahlgpt" target="_blank" class="button wide">Code ansehen</a></li>
		</ul>
	</div>
	<ul class="icons">
		<li>
			<a href="https://mastodon.social/@@j0hnny" target="_blank" class="icon brands alt fa-mastodon">
				<span class="label">Mastodon</span>
			</a>
		</li>
		<li>
			<a href="https://twitter.com/johnny_leo" target="_blank" class="icon brands alt fa-twitter">
				<span class="label">Twitter</span>
			</a>
		</li>
		<li>
			<a href="https://github.com/nor0x" target="_blank" class="icon brands alt fa-github">
				<span class="label">GitHub</span>
			</a>
		</li>
		<li>
			<a @onclick="CopyEmailToClipboard" class="icon solid alt fa-envelope" style="cursor:pointer;"><span class="label">Email</span></a>
		</li>
		<li>
			<a href="https://bento.me/nor0x" target="_blank" class="icon solid alt fa-mug-hot">
				<span class="label">Buy Me a Coffee</span>
			</a>
		</li>
	</ul>
	<div class="copyright">
		<p>
			Made with ☕ by <a href="https://johnnys.page" target="_blank">Joachim Leonfellner</a> in Vienna 🇦🇹 🇪🇺
		</p>
		<br />
		<p>&copy; 2024 | Version: <a href="@Settings.GetVersionUrl()">@Settings.Version.Substring(0, 7)</a></p>
	</div>
	<img src="images/header-img.png" class="header-img" />

</section>

@code
{
	private string? _question;
	private string? _questionButtonText = "Frage stellen";
	private bool _waitingForAnswer;
	private bool _buttonDisabled = true;
	int _answerCount = 0;
	Timer? _timer;
	int _countDown;

	private List<(string answer, string party, Citation? source)>? _answers;
	List<(string party, string documentId, bool selected, int order)> _parties = new List<(string party, string documentId, bool
	selected, int order)>
	{
	("ÖVP","oevp", false, 0),
	("SPÖ","spoe_20240911", false, 1),
	("FPÖ","fpoe", false, 2),
	("GRÜNE","gruene", false, 3),
	("NEOS","neos", false, 4),
	("BIER","bier", false, 5),
	("KEINE","wandel", false, 6),
	("KPÖ","kpoe", false, 7),
	("LMP","lmp", false, 8)
	};


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender)
		{
			await _js.InvokeVoidAsync("doSuggestions");
			await Task.Run(async () =>
			{
				_answerCount = await _chat.GetCount();
				await _js.InvokeVoidAsync("doCountUp", _answerCount);
			});
		}
	}

	private void QuestionChanged(ChangeEventArgs e)
	{
		_question = e?.Value?.ToString() ?? "";
		_buttonDisabled = string.IsNullOrEmpty(_question) || !_parties.Any(p => p.selected);
		StateHasChanged();
	}

	private async void AskQuestion()
	{
		try
		{
			var question = _question;
			if(string.IsNullOrEmpty(question))
			{
				return;
			}
			if (_timer is null)
			{
				_countDown = 10;
			}

			if (_countDown > 0 && _timer is not null)
			{
				return;
			}
			_answers = new();
			if (string.IsNullOrEmpty(question))
			{
				return;
			}
			if (!_parties.Any(p => p.selected))
			{
				return;
			}
			_timer = new Timer(_ =>
				{
					_countDown--;
					_questionButtonText = _countDown > 0 ? $"nächste Frage in {_countDown} Sekunden" : "Frage stellen";
					StateHasChanged();
					if(_countDown <= 0)
					{
						_timer?.Dispose();
						_timer = null;
					}

				}, null, 0, 1000);
			_waitingForAnswer = true;
			await _js.InvokeVoidAsync("scrollToElement", "#one");
			foreach (var p in _parties.Where(p => p.selected))
			{
				var answer = await _chat.AskQuestion(question, new List<string> { p.documentId });
				if (answer is null)
				{
					_answers.Add(("Sorry, ich konnte keine Antwort finden.", p.party, null));
				}
				else
				{
					_answers.Add((answer.Result, p.party, answer.RelevantSources.FirstOrDefault()));
				}

				_answers = _answers.OrderBy(a => _parties.First(p => p.party == a.party).order).ToList();
				StateHasChanged();

			}

			_waitingForAnswer = false;
			StateHasChanged();
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
		}
	}

	void SelectParty(string party)
	{
		_parties = _parties.Select(p => p.party == party ? (p.party, p.documentId, !p.selected, p.order) : p).ToList();

		_buttonDisabled = string.IsNullOrEmpty(_question) || !_parties.Any(p => p.selected);
		StateHasChanged();
	}

	string GetDownloadUrl(string party)
	{
		var documentId = _parties.First(p => p.party == party).documentId;
		return $"https://raw.githubusercontent.com/nor0x/wahlgpt/main/WahlGPT.Importer/Documents/{documentId}.pdf";
	}

	private async void CopyEmailToClipboard()
	{
		await _js.InvokeVoidAsync("copyToClipboard", "hi@johnnys.page");
	}
}